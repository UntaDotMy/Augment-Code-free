name: Build Executable

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'
        type: string
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string
      create_release:
        description: 'Create a release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            executable_name: AugmentFree_latest.exe
            platform_suffix: windows
          - os: ubuntu-latest
            executable_name: AugmentFree_latest
            platform_suffix: linux
          - os: macos-latest
            executable_name: AugmentFree_latest
            platform_suffix: macos

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache pip dependencies (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."

        # Use pip for reliable installation
        python -m pip install --upgrade pip setuptools wheel

        # Install from requirements.txt
        python -m pip install -r requirements.txt

        # Add src to Python path
        echo "PYTHONPATH=${{ github.workspace }}/src" >> $GITHUB_ENV

        echo "✅ Dependencies installed successfully"

    - name: Check for icon file
      id: check_icon
      run: |
        if [ -f "app.ico" ]; then
          echo "icon_exists=true" >> $GITHUB_OUTPUT
        else
          echo "icon_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "🔨 Building Windows executable..."

        # Build with PyInstaller (simplified)
        if [ "${{ steps.check_icon.outputs.icon_exists }}" = "true" ]; then
          python -m PyInstaller --onefile --windowed --icon=app.ico --name=AugmentFree_latest --add-data="src/augment_free/web;web" --add-data="src/augment_free/translations;translations" src/augment_free/main.py
        else
          python -m PyInstaller --onefile --windowed --name=AugmentFree_latest --add-data="src/augment_free/web;web" --add-data="src/augment_free/translations;translations" src/augment_free/main.py
        fi

        # Rename executable to include platform suffix for release
        if [ -f "dist/AugmentFree_latest.exe" ]; then
          cp "dist/AugmentFree_latest.exe" "dist/AugmentFree_latest_${{ matrix.platform_suffix }}.exe"
        fi
      shell: bash
      timeout-minutes: 20

    - name: Build executable (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "🔨 Building ${{ runner.os }} executable..."

        # Build with PyInstaller (with fallback for icon issues)
        if [ "${{ steps.check_icon.outputs.icon_exists }}" = "true" ]; then
          # Try with icon first
          if python -m PyInstaller --onefile --windowed --icon=app.ico --name=AugmentFree_latest --add-data="src/augment_free/web:web" --add-data="src/augment_free/translations:translations" src/augment_free/main.py; then
            echo "✅ Build successful with icon"
          else
            echo "⚠️ Icon build failed, trying without icon..."
            python -m PyInstaller --onefile --windowed --name=AugmentFree_latest --add-data="src/augment_free/web:web" --add-data="src/augment_free/translations:translations" src/augment_free/main.py
          fi
        else
          python -m PyInstaller --onefile --windowed --name=AugmentFree_latest --add-data="src/augment_free/web:web" --add-data="src/augment_free/translations:translations" src/augment_free/main.py
        fi

        # Rename executable to include platform suffix for release
        if [ -f "dist/AugmentFree_latest" ]; then
          cp "dist/AugmentFree_latest" "dist/AugmentFree_latest_${{ matrix.platform_suffix }}"
        fi
      shell: bash
      timeout-minutes: 20

    - name: Verify build output
      run: |
        echo "📋 Checking build output..."
        ls -la dist/ || dir dist\

        # Check if the platform-specific executable exists
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ -f "dist/AugmentFree_latest_${{ matrix.platform_suffix }}.exe" ]; then
            echo "✅ Windows executable found"
          else
            echo "❌ Windows executable not found"
            exit 1
          fi
        else
          if [ -f "dist/AugmentFree_latest_${{ matrix.platform_suffix }}" ]; then
            echo "✅ ${{ runner.os }} executable found"
          else
            echo "❌ ${{ runner.os }} executable not found"
            exit 1
          fi
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform_suffix }}-executable
        path: |
          dist/AugmentFree_latest_${{ matrix.platform_suffix }}*
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.create_release == true) || (github.event_name == 'workflow_call' && inputs.create_release == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Extract changelog content
      id: changelog
      run: |
        echo "📋 Extracting changelog content..."

        # Simple approach - extract the latest version section from CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          version="${{ inputs.version || github.ref_name }}"

          # Try to find the version section, fallback to a simple extraction
          changelog_content=$(awk '/^## \['"${version}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md 2>/dev/null || echo "")

          # If that fails, try without the 'v' prefix
          if [ -z "$changelog_content" ]; then
            version_no_v="${version#v}"
            changelog_content=$(awk '/^## \['"${version_no_v}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md 2>/dev/null || echo "")
          fi

          # If still empty, try unreleased section
          if [ -z "$changelog_content" ]; then
            changelog_content=$(awk '/^## \[Unreleased\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md 2>/dev/null || echo "")
          fi

          # Clean up empty lines and sections
          changelog_content=$(echo "$changelog_content" | sed '/^$/d' | sed '/^### *$/d' | sed '/^- *$/d')

          # If still empty, use default
          if [ -z "$changelog_content" ]; then
            changelog_content="### Changes
        - Various improvements and bug fixes
        - See commit history for detailed changes"
          fi

          echo "✅ Found changelog content"
        else
          echo "⚠️ CHANGELOG.md not found, using default content"
          changelog_content="### Changes
        - Various improvements and bug fixes
        - See commit history for detailed changes"
        fi

        # Save to output
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$changelog_content" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.version || github.ref_name }}
        name: ${{ inputs.version || github.ref_name }}
        files: |
          artifacts/windows-executable/AugmentFree_latest_windows.exe
          artifacts/linux-executable/AugmentFree_latest_linux
          artifacts/macos-executable/AugmentFree_latest_macos
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🚀 AugmentCode Free ${{ inputs.version || github.ref_name }}

          **Modified by UntaDotMy** - Enhanced version with comprehensive automation and multi-language support.

          ${{ steps.changelog.outputs.content }}

          ### 📦 Downloads
          - **Windows**: `AugmentFree_latest_windows.exe`
          - **Linux**: `AugmentFree_latest_linux`
          - **macOS**: `AugmentFree_latest_macos`

          ### ✨ Key Features
          - 🤖 **Full Automation Workflow** - Complete 4-step automation process
          - 🧹 **Focused Cleaning Operations** - Streamlined Augment-specific data cleaning
          - 🔍 **Smart IDE Detection** - Automatic detection with path verification
          - 💙 **VS Code Insiders Support** - Complete compatibility
          - 🌐 **Multi-language Interface** - Chinese/English switching
          - 📋 **One-click Operations** - Copy paths and execute operations
          - 🎯 **Smart Notifications** - Non-overlapping toast system
          - ⚙️ **Customizable Options** - Selective automation steps

          ### 🔗 Links
          - **Original Project**: [vagmr/Augment-Code-free](https://github.com/vagmr/Augment-Code-free)
          - **Documentation**: [README.md](https://github.com/UntaDotMy/Augment-Code-free/blob/main/README.md)
          - **Changelog**: [CHANGELOG.md](https://github.com/UntaDotMy/Augment-Code-free/blob/main/CHANGELOG.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
