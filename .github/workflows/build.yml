name: Build Executable

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: 'v1.0.0'
        type: string
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string
      create_release:
        description: 'Create a release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            executable_name: AugmentFree_latest.exe
            platform_suffix: windows
          - os: ubuntu-latest
            executable_name: AugmentFree_latest
            platform_suffix: linux
          - os: macos-latest
            executable_name: AugmentFree_latest
            platform_suffix: macos

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache pip dependencies (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        echo "üì¶ Installing dependencies..."

        # Use pip for reliable installation
        python -m pip install --upgrade pip setuptools wheel

        # Install from requirements.txt
        python -m pip install -r requirements.txt

        # Add src to Python path
        echo "PYTHONPATH=${{ github.workspace }}/src" >> $GITHUB_ENV

        echo "‚úÖ Dependencies installed successfully"

    - name: Check for icon file
      id: check_icon
      run: |
        if [ -f "app.ico" ]; then
          echo "icon_exists=true" >> $GITHUB_OUTPUT
        else
          echo "icon_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "üî® Building Windows executable..."

        # Build with PyInstaller (simplified)
        if [ "${{ steps.check_icon.outputs.icon_exists }}" = "true" ]; then
          python -m PyInstaller --onefile --windowed --icon=app.ico --name=AugmentFree_latest --add-data="src/augment_free/web;web" --add-data="src/augment_free/translations;translations" src/augment_free/main.py
        else
          python -m PyInstaller --onefile --windowed --name=AugmentFree_latest --add-data="src/augment_free/web;web" --add-data="src/augment_free/translations;translations" src/augment_free/main.py
        fi

        # Rename executable to include platform suffix for release
        if [ -f "dist/AugmentFree_latest.exe" ]; then
          cp "dist/AugmentFree_latest.exe" "dist/AugmentFree_latest_${{ matrix.platform_suffix }}.exe"
        fi
      shell: bash
      timeout-minutes: 20

    - name: Build executable (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        echo "üî® Building ${{ runner.os }} executable..."

        # Build with PyInstaller (with fallback for icon issues)
        if [ "${{ steps.check_icon.outputs.icon_exists }}" = "true" ]; then
          # Try with icon first
          if python -m PyInstaller --onefile --windowed --icon=app.ico --name=AugmentFree_latest --add-data="src/augment_free/web:web" --add-data="src/augment_free/translations:translations" src/augment_free/main.py; then
            echo "‚úÖ Build successful with icon"
          else
            echo "‚ö†Ô∏è Icon build failed, trying without icon..."
            python -m PyInstaller --onefile --windowed --name=AugmentFree_latest --add-data="src/augment_free/web:web" --add-data="src/augment_free/translations:translations" src/augment_free/main.py
          fi
        else
          python -m PyInstaller --onefile --windowed --name=AugmentFree_latest --add-data="src/augment_free/web:web" --add-data="src/augment_free/translations:translations" src/augment_free/main.py
        fi

        # Rename executable to include platform suffix for release
        if [ -f "dist/AugmentFree_latest" ]; then
          cp "dist/AugmentFree_latest" "dist/AugmentFree_latest_${{ matrix.platform_suffix }}"
        fi
      shell: bash
      timeout-minutes: 20

    - name: Verify build output
      run: |
        echo "üìã Checking build output..."
        ls -la dist/ || dir dist\

        # Check if the platform-specific executable exists
        if [ "${{ runner.os }}" = "Windows" ]; then
          if [ -f "dist/AugmentFree_latest_${{ matrix.platform_suffix }}.exe" ]; then
            echo "‚úÖ Windows executable found"
          else
            echo "‚ùå Windows executable not found"
            exit 1
          fi
        else
          if [ -f "dist/AugmentFree_latest_${{ matrix.platform_suffix }}" ]; then
            echo "‚úÖ ${{ runner.os }} executable found"
          else
            echo "‚ùå ${{ runner.os }} executable not found"
            exit 1
          fi
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform_suffix }}-executable
        path: |
          dist/AugmentFree_latest_${{ matrix.platform_suffix }}*
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.create_release == true) || (github.event_name == 'workflow_call' && inputs.create_release == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Extract changelog content
      id: changelog
      run: |
        # Extract unreleased section from CHANGELOG.md
        if [ -f "CHANGELOG.md" ]; then
          echo "üìã Extracting changelog content..."

          # Use Python for reliable cross-platform extraction
          # Extract from the version section that matches the current release
          version="${{ inputs.version || github.ref_name }}"
          changelog_content=$(python3 -c "
import sys
import re
try:
    with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
        content = f.read()

    lines = content.split('\n')
    version = '$version'

    # First try to find the specific version section
    version_start = -1
    version_end = -1

    # Look for version section like '## [v1.2.3]' or '## [1.2.3]'
    version_patterns = [
        f'## [{version}]',
        f'## [{version.lstrip(\"v\")}]'
    ]

    for pattern in version_patterns:
        for i, line in enumerate(lines):
            if line.strip().startswith(pattern):
                version_start = i + 1
                break
        if version_start != -1:
            break

    # If version section not found, try unreleased section
    if version_start == -1:
        for i, line in enumerate(lines):
            if line.strip() == '## [Unreleased]':
                version_start = i + 1
                break

    if version_start != -1:
        # Find the end of the section
        for i in range(version_start, len(lines)):
            line = lines[i].strip()
            if line.startswith('## ') or line == '---':
                version_end = i
                break

        if version_end == -1:
            version_end = len(lines)

        section_lines = lines[version_start:version_end]

        # Remove empty lines at the beginning and end
        while section_lines and not section_lines[0].strip():
            section_lines.pop(0)
        while section_lines and not section_lines[-1].strip():
            section_lines.pop()

        # Filter out lines that are just section headers with no content
        filtered_lines = []
        skip_next = False
        for i, line in enumerate(section_lines):
            if line.strip().startswith('### '):
                # Check if this section has content
                has_content = False
                for j in range(i + 1, len(section_lines)):
                    next_line = section_lines[j].strip()
                    if next_line.startswith('### '):
                        break
                    if next_line and next_line != '-':
                        has_content = True
                        break

                if has_content:
                    filtered_lines.append(line)
                    skip_next = False
                else:
                    skip_next = True
            elif not skip_next:
                if line.strip() and line.strip() != '-':
                    filtered_lines.append(line)

        section_content = '\n'.join(filtered_lines)
        print(section_content)
    else:
        print('')
except Exception as e:
    print('')
")

          # Debug: show what we extracted
          echo "üìù Extracted content ($(echo "$changelog_content" | wc -l) lines):"
          echo "$changelog_content" | head -10

          # If changelog content is empty, use a default message
          if [ -z "$changelog_content" ] || [ "$(echo "$changelog_content" | tr -d '[:space:]')" = "" ]; then
            echo "‚ö†Ô∏è No unreleased content found, using default message"
            changelog_content="### Changes
        - Various improvements and bug fixes
        - See commit history for detailed changes"
          else
            echo "‚úÖ Found unreleased content"
          fi

          # Save to output (escape newlines for GitHub Actions)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

        else
          echo "‚ö†Ô∏è CHANGELOG.md not found, using default content"
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "### Changes
        - Various improvements and bug fixes
        - See commit history for detailed changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.version || github.ref_name }}
        name: ${{ inputs.version || github.ref_name }}
        files: |
          artifacts/windows-executable/AugmentFree_latest_windows.exe
          artifacts/linux-executable/AugmentFree_latest_linux
          artifacts/macos-executable/AugmentFree_latest_macos
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## üöÄ AugmentCode Free ${{ inputs.version || github.ref_name }}

          **Modified by UntaDotMy** - Enhanced version with comprehensive automation and multi-language support.

          ${{ steps.changelog.outputs.content }}

          ### üì¶ Downloads
          - **Windows**: `AugmentFree_latest_windows.exe`
          - **Linux**: `AugmentFree_latest_linux`
          - **macOS**: `AugmentFree_latest_macos`

          ### ‚ú® Key Features
          - ü§ñ **Full Automation Workflow** - Complete 4-step automation process
          - üë§ **Account Information** - Integrated Augment account details and status
          - üîç **Smart IDE Detection** - Automatic detection with path verification
          - üíô **VS Code Insiders Support** - Complete compatibility
          - üåê **Multi-language Interface** - Chinese/English switching
          - üìã **One-click Operations** - Copy paths and execute operations
          - üéØ **Smart Notifications** - Non-overlapping toast system
          - ‚öôÔ∏è **Customizable Options** - Selective automation steps

          ### üîó Links
          - **Original Project**: [vagmr/Augment-Code-free](https://github.com/vagmr/Augment-Code-free)
          - **Documentation**: [README.md](https://github.com/UntaDotMy/Augment-Code-free/blob/main/README.md)
          - **Changelog**: [CHANGELOG.md](https://github.com/UntaDotMy/Augment-Code-free/blob/main/CHANGELOG.md)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
